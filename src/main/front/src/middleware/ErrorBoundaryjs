import React from "react";

class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props)
        this.state = { hasError: false }
    }

    static getDerivedStateFromError(error) {
        // 다음 렌더링에서 폴백 UI가 보이도록 상태를 업데이트 합니다.
        console.log("here")
        return { hasError: true }
    }

    componentDidCatch(error, errorInfo) {
        // 에러 리포팅 서비스에 에러를 기록할 수도 있습니다.
        // logErrorToMyService(error, errorInfo)
        console.log("========= logInfo ========")
        console.log(error)
        console.log(errorInfo)
    }

    render() {
        if (this.state.hasError) {
            // 폴백 UI를 커스텀하여 렌더링할 수 있습니다.
            console.log("jee")
            return <h1>Something went wrong.</h1>
        }
        const {error} = this.state
        if (error) {
            console.log("here")
        }

        return this.props.children
    }
}

export { ErrorBoundary };




// import React, { Component, ErrorInfo, ReactNode } from "react";
//
// interface Props {
//     children?: ReactNode;
// }
//
// interface State {
//     hasError: boolean;
// }
//
// class ErrorBoundary extends Component<Props, State> {
//     public state: State = {
//         hasError: false
//     };
//
//     public static getDerivedStateFromError(_: Error): State {
//         // Update state so the next render will show the fallback UI.
//         return { hasError: true };
//     }
//
//     public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
//         console.error("Uncaught error:", error, errorInfo);
//     }
//
//     public render() {
//         if (this.state.hasError) {
//             console.log("error!!!")
//             return <h1>Sorry.. there was an error</h1>;
//         }
//
//         return this.props.children;
//     }
// }
//
// export default ErrorBoundary;
//
//
//








// import * as React from 'react';
//
// const changedArray = (prevArray: Array<unknown> = [], nextArray: Array<unknown> = []) =>
//     prevArray.length !== nextArray.length || prevArray.some((item, index) => !Object.is(item, nextArray[index]));
//
// interface ErrorBoundaryProps {
//     onError?: (error: Error, info: { componentStack: string }) => void;
//     resetKeys?: Array<unknown>;
//     fallback?: React.ReactElement<unknown, string | React.FunctionComponent | typeof React.Component> | null
// }
//
// type ErrorBoundaryState = { error: Error | null };
//
// const initialState: ErrorBoundaryState = { error: null };
//
// class ErrorBoundary extends React.Component<React.PropsWithRef<React.PropsWithChildren<ErrorBoundaryProps>>,
//     ErrorBoundaryState> {
//     static getDerivedStateFromError(error: Error) {
//         return { error };
//     }
//
//     state = initialState;
//
//     resetErrorBoundary = () => {
//         this.reset();
//     };
//
//     reset() {
//         this.setState(initialState);
//     }
//
//     componentDidCatch(error: Error, info: React.ErrorInfo) {
//         this.props.onError?.(error, info);
//     }
//
//     componentDidUpdate(prevProps: ErrorBoundaryProps,
//                        prevState: ErrorBoundaryState,
//     ) {
//         const { error } = this.state;
//         const { resetKeys } = this.props;
//
//         if (
//             error !== null &&
//             prevState.error !== null &&
//             changedArray(prevProps.resetKeys, resetKeys)
//         ) {
//             this.reset();
//         }
//     }
//
//     render() {
//         const { error } = this.state;
//         const { fallback, children } = this.props;
//
//         if (error !== null) {
//             const props = {
//                 error,
//                 resetErrorBoundary: this.resetErrorBoundary,
//             };
//             if (React.isValidElement(fallback)) {
//                 return fallback;
//             }
//             props.resetErrorBoundary();
//         }
//         return children;
//     }
// }
//
// export { ErrorBoundary };
// export type { ErrorBoundaryProps };
